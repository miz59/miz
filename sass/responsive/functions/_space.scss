@use "sass:map";
@use "sass:string";


$paddings-list : p,pb,pt,pr,pl,px,py;

@function padding-generator($perfix,$property,$map){

    $name-list : ();
    $count : map.get($map,'count');
    $factor : map.get($map,'factor');
    $unit : map.get($map,'unit');
    $list : ();
    $k:1;
    @for $i from 1 through length($paddings-list){

        $name-list:generate-responsive-classes(nth($paddings-list, $i),$count);

        @for $j from 1 through length($name-list){
            @if $k==$count+1{
                $k:1;
            } 
            @if string.slice(nth($name-list,$j),3 , 3) == 'b'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-bottom',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 't'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-top',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'l'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-left',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'r'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-right',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'x'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) ,
                    propertyValue:unquote( '0 ' + ($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'y'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) ,
                    propertyValue:unquote(($factor*$k)+$unit + ' 0')
                );
                $list:append($list ,$map,comma);
            }@else{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property),
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }
         
            $k:$k+1;
        } 
    }
    @return $list;


}   




$margins-list : m,mb,mt,mr,ml,mx,my;
@function margin-generator($perfix,$property,$map){

    
    $name-list : ();
    $count : map.get($map,'count');
    $factor : map.get($map,'factor');
    $unit : map.get($map,'unit');
    $list : ();
    $k:1;
    @for $i from 1 through length($margins-list){

        $name-list:generate-responsive-classes(nth($margins-list, $i),$count);

        @for $j from 1 through length($name-list){
            
            @if $k==$count+1{
                $k:1;
            } 
            @if string.slice(nth($name-list,$j),3 , 3) == 'b'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-bottom',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 't'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-top',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'l'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-left',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'r'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) + '-right',
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'x'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) ,
                    propertyValue:unquote( '0 ' + ($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }@else if string.slice(nth($name-list,$j),3 , 3) == 'y'{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property) ,
                    propertyValue:unquote(($factor*$k)+$unit + ' 0')
                );
                $list:append($list ,$map,comma);
            }@else{
                $map:(
                    name: nth($name-list,$j),
                    propertyKey:($property),
                    propertyValue:unquote(($factor*$k)+$unit)
                );
                $list:append($list ,$map,comma);
            }
            $k:$k+1;          
        } 
    }
    @return $list;
}



$gap-list : gap;
@function gap-generator($perfix,$property,$map){

    
    $name-list : ();
    $count : map.get($map,'count');
    $factor : map.get($map,'factor');
    $unit : map.get($map,'unit');
    $list : ();
    $k:1;
    @for $i from 1 through length($gap-list){

        $name-list:generate-responsive-classes(nth($gap-list, $i),$count);

        @for $j from 1 through length($name-list){
            @if $k==$count+1{
                $k:1;
            } 
            $map:(
                name: nth($name-list,$j),
                propertyKey:($property),
                propertyValue:unquote(($factor*$k)+$unit)
            );
            $list:append($list ,$map,comma);   
            $k:$k+1;        
        } 
    }
    @return $list;
}



$p : padding-generator($paddings-list ,padding, $conf-paddings) ;
$m : margin-generator($margins-list ,margin, $conf-margins) ;
$gap : gap-generator($gap-list ,gap, $conf-gaps) ;


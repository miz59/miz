@import "../functions/responsive";
@import "../../config";

// giving to parent class [row] for cols

.row{
    width: 100%;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}
$col-list:col;
$order-list:order;
$grow-list:grow;
$conf-list:(
    flex-direction:map.get($conf-flex-direction , responsive) ,
    justify-content:map.get($conf-justify-content , responsive) ,
    justify-self:map.get($conf-justify-self , responsive) ,
    justify-items:map.get($conf-justify-items , responsive) , 
    align-content:map.get($conf-align-content , responsive) , 
    align-self:map.get($conf-align-self , responsive) , 
    align-items:map.get($conf-align-items , responsive) , 
);

$flex-direction-value-list:(row , row-reverse , column , column-reverse);
$justify-content-value-list:(flex-start , center , flex-end , space-between , space-around , space-evenly);
$justify-self-value-list:(start , center , end ,  left , right , stretch);
$justify-items-value-list:(start , center , end ,  left , right , stretch);
$align-content-value-list:(flex-start , center , flex-end , space-between , space-around , space-evenly);
$align-self-value-list:(flex-start , center , flex-end , baseline , stretch);
$align-items-value-list:(flex-start , center , flex-end , stretch , start , end , baseline);


$value-list:(
    $flex-direction-value-list ,
    $justify-content-value-list ,
    $justify-self-value-list ,
    $justify-items-value-list ,
    $align-content-value-list ,
    $align-self-value-list ,
    $align-items-value-list ,
);
$key-list:(
    flex-direction ,
    justify-content ,
    justify-self ,
    justify-items ,
    align-content ,
    align-self ,
    align-items ,
);

@function generate-classes-items($prefix,$property,$conf-map){
    $name-list : ();
    $count : map.get($conf-map,'count');
    $unit : map.get($conf-map,'unit');
    $list : ();
    @if $count == 0 {
        @return ();
    }
    @if check-responsive-status($conf-map,responsive){
        @for $i from 1 through length($prefix){
            $name-list:generate-responsive-classes(nth($prefix,$i),$count);
            $list:generate-properties($name-list,$conf-map,$property,nth($prefix,$i));
        }
    }
    @else{
        @for $i from 1 through length($prefix){
            $name-list:generate-classes(nth($prefix,$i),$count);
            $list:generate-properties($name-list,$conf-map,$property,nth($prefix,$i));
        }
    }
    @return $list;
}

@function get-flex-break-points-classes($break-points-key,$property-key-list , $property-value-list){
    $list : ();
    $base : ();
    @for $i from 1 through length($property-value-list){
        @if check-responsive-status($conf-list, $property-key-list){
            $base:generate-classes-responsive-on-value($property-key-list , $break-points-key , nth($property-value-list , $i));
        }@else{
            $base:generate-classes-on-value($property-key-list  ,nth($property-value-list , $i));
        }
        $map:(
            className: $base,
            propertyKeys:$property-key-list,
            propertyValues:nth($property-value-list , $i)
        );
        $list:join($list , $map);
    }
    @return $list;
}
@function generate-flex-classes($property-key-list , $property-value-list){
    $list : ();
    $count : ();
    @if check-responsive-status($conf-list, $property-key-list){
        @each $key , $value in $break-points{
            $list:append($list , get-flex-break-points-classes($key,$property-key-list , $property-value-list));
        }
    }@else{
        $list:append($list , get-flex-break-points-classes(null,$property-key-list , $property-value-list));   
    }
   
    @return $list;
}

@function generate-flex-list(){
    $flex-list:();

    @for $i from 1 through length($key-list){
        $value:generate-flex-classes(nth($key-list , $i), nth($value-list , $i));
        $flex-list:join($flex-list , $value);
    }
    @return $flex-list;
}

$flex-cols : generate-classes-items($col-list ,width, $conf-cols) ;
$flex-orders:generate-classes-items($order-list,order,$conf-orders);
$flex-grows:generate-classes-items($grow-list,flex-grow,$conf-grows);
$flex-type : generate-flex-list();

// @function prepare-responsive-list($conf-map,$property-key,$prefix,$number){
//     $list:();
//     @if check-responsive-status($conf-map,responsive) {
//         $j:0;
//         @debug $j;
//         @each $key , $value in $break-points{
//             $j:$j+1;
//             @debug $j;
//             $name:generate-responsive-classes($prefix, $number);
//             @debug "56"+$name;
//             @debug "321" + $name;
//             $map:(
//                 name: nth($name , ($j * $number)),
//                 propertyKey:$property-key,
//                 propertyValue:$number
//             );
//             @debug $map;
//             $list:append($list , $map);
//             @debug $list
//         }
//     }
//     @else{
//         $base:nth(generate-classes($prefix , $number) , $number);
//         $map:(
//             name: $base,
//             propertyKey:$property-key,
//             propertyValue:$number
//         );
//         $list:append($list , $map);
       
//     }
//     @return $list;
// }
// @function generate-flex-cols-test($map-config,$map-counter){
//     $list:();
//     $map-counter:map.get($map-config,$map-counter);
//     @if $map-counter!=0{
//         @if check-responsive-status($map-config,responsive){
//             @each $key , $value in $break-points{
//                 $name:generate-responsive-classes($prefix, $map-counter);
//             }
//             $list:append($list , $map-list);
//         }
//     }
//     @else{
//         @return ();
//     }
// }
// @function generate-flex-cols(){
//     $list:();
//     $classes-list:();
//     $map-counter:map.get($conf-cols , count);
//     $width:calc(100% / $map-counter);
//     @if map.get($conf-cols , count) == 0{
//         @return ();
//     }
//     @for $i from 1 through 10{
//         $list:prepare-responsive-list($conf-cols , width , col , $width);
//         @debug $list;
//         $classes-list:append($classes-list, $list , comma);
//         @debug $classes-list;
//     }
//         @return $list;
// }

// @function generate-flex-grows(){
//     $list:();
//     $base:'';
//     $a : ();
//     @if map.get($conf-grows , count) == 0{
//         @return ();
//     }
//     @for $i from 1 through map.get($conf-grows , count){
//         $list:prepare-responsive-list($conf-grows , flex-grow , grow , $i);
//         $a : append($a, $list, comma);
//     }
    

//     @return $a;
// }

// @function generate-flex-orders(){
//     $list:();
//     $base:'';
//     @if map.get($conf-orders , count) == 0{
//         @return ();
//     }
//     @for $i from 1 through map.get($conf-orders , count){
//         $list:prepare-responsive-list($conf-orders , flex-order , flex-order , $i);
//     }

//     @return $list;
// }

// // flex

// $flex-direction-value-list:(row , row-reverse , column , column-reverse);
// $justify-content-value-list:(flex-start , center , flex-end , space-between , space-around , space-evenly);
// $justify-self-value-list:(start , center , end ,  left , right , stretch);
// $justify-items-value-list:(start , center , end ,  left , right , stretch);
// $align-content-value-list:(flex-start , center , flex-end , space-between , space-around , space-evenly);
// $align-self-value-list:(flex-start , center , flex-end , baseline , stretch);
// $align-items-value-list:(flex-start , center , flex-end , stretch , start , end , baseline);

// $conf-list:(
//     flex-direction:map.get($conf-flex-direction , responsive) ,
//     justify-content:map.get($conf-justify-content , responsive) ,
//     justify-self:map.get($conf-justify-self , responsive) ,
//     justify-items:map.get($conf-justify-items , responsive) , 
//     align-content:map.get($conf-align-content , responsive) , 
//     align-self:map.get($conf-align-self , responsive) , 
//     align-items:map.get($conf-align-items , responsive) , 
// );

// $value-list:(
//     $flex-direction-value-list ,
//     $justify-content-value-list ,
//     $justify-self-value-list ,
//     $justify-items-value-list ,
//     $align-content-value-list ,
//     $align-self-value-list ,
//     $align-items-value-list ,
// );
// $key-list:(
//     flex-direction ,
//     justify-content ,
//     justify-self ,
//     justify-items ,
//     align-content ,
//     align-self ,
//     align-items ,
// );

// @function generate-flex-classes($property-key-list , $property-value-list){
//     $list:();
//     @for $c from 1 through length($property-key-list){
//         @for $i from 1 through length($property-value-list){
//             @if map.get($conf-list , nth($property-key-list , $c)) == true{
//                 @each $key , $value in $break-points{
//                     $base:generate-classes-responsive-on-value(nth($property-key-list , $c) , $key , nth($property-value-list , $i));
//                     $list-del-text:"space" , "flex" , "direction";
//                     $base:"";
//                     $list-null:();
//                     @for $h from 1 through length($list-del-text){
//                         @if string.index($base , "-#{nth($list-del-text , $h)}-"){
//                             $split:string.split($base , "-");
//                             $nth-del:index($split , nth($list-del-text , $h));
//                             @for $n from 1 through length($split){
//                                 @if $n != $nth-del{
//                                     $list-null:append($list-null,nth($split,$n),comma);
//                                 }
//                             }
//                             @for $t from 1 through length($list-null){
//                                 @if $t == length($list-null){
//                                     $base:$base + "#{nth($list-null , $t)}";
//                                 }
//                                 @else{
//                                     $base:$base + "#{nth($list-null , $t)}-";
//                                 }
//                             }
//                         }
//                     }
//                     $map:(
//                         name: $base,
//                         propertyKey:nth($property-key-list , $c),
//                         propertyValue:nth($property-value-list , $i)
//                     );
//                     $list:append($list , $map);
//                 }
//             }
//             @else{
//                 $base:generate-classes-on-value(nth($property-key-list , $c) , nth($property-value-list , $i));
//                 $list-del-text:"space" , "flex" , "direction";
//                 $base:"";
//                 $list-null:();
//                 @for $h from 1 through length($list-del-text){
//                     @if string.index($base , "-#{nth($list-del-text , $h)}-"){
//                         $split:string.split($base , "-");
//                         $nth-del:index($split , nth($list-del-text , $h));
//                         @for $n from 1 through length($split){
//                             @if $n != $nth-del{
//                                 $list-null:append($list-null,nth($split,$n),comma);
//                             }
//                         }
//                         @for $t from 1 through length($list-null){
//                             @if $t == length($list-null){
//                                 $base:$base + "#{nth($list-null , $t)}";
//                             }
//                             @else{
//                                 $base:$base + "#{nth($list-null , $t)}-";
//                             }
//                         }
//                     }
//                 }
//                 $map:(
//                     name: $base,
//                     propertyKey:nth($property-key-list , $c),
//                     propertyValue:nth($property-value-list , $i)
//                 );
//                 $list:append($list , $map);
//             }
//         }
//     }
//     @return $list;
// }


// $flex-list:();
// @for $i from 1 through length($key-list){
//     $value:generate-flex-classes(nth($key-list , $i), nth($value-list , $i));
//     $flex-list:join($flex-list , $value);
// }

// // flex-warp

// .flex-wrap{
//     flex-wrap: wrap;
// }

// .flex-nowrap{
//     flex-wrap: nowrap;
// }

//  $flex-cols:generate-flex-cols();
//  $flex-grows:generate-flex-grows();
//  $flex-orders:generate-flex-orders();

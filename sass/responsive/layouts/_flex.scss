@import "../functions/responsive";
@import "../../config";

.row{
    width: 100%;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

@function generate-flex-cols(){
    $list:();
    $base:'';
    $default-base:'';
    $names:'';
    @if map.get($conf-cols , count) == 0{
        @return ();
    }
    @else{
        @for $i from 1 through map.get($conf-cols , count){
            @if map.get($conf-cols , responsive) == true{
                $base:unquote(".col" + "-" + $i);
                $name:$base;
                $name-list:string.split($name,"-");
                $num:nth($name-list,length($name-list));
                $map:(
                    name: $base,
                    propertyKey:width,
                    propertyValue:calc((100% / map.get($conf-cols , count)) * $num)
                    );
                $list:append($list , $map);
                @each $key , $value in $break-points{
                    $base:unquote(".col" + "-"+ $key + "-" + $i);
                    $name:$base;
                    $name-list:string.split($name,"-");
                    $num:nth($name-list,length($name-list));
                    $map:(
                        name: $base,
                        propertyKey:width,
                        propertyValue:calc((100% / map.get($conf-cols , count)) * $num)
                        );
                    $list:append($list , $map);
                }
            }
            @else{
                $base:unquote(".col" + "-" + $i);
                $name:$base;
                $name-list:string.split($name,"-");
                $num:nth($name-list,length($name-list));
                $map:(
                    name: $base,
                    propertyKey:width,
                    propertyValue:calc((100% / map.get($conf-cols , count)) * $num)
                    );
                $list:append($list , $map);
            }
        }
        @return $list;
    }
}
$flex-cols:generate-flex-cols();

@function generate-flex-orders(){
    $list:();
    $base:'';
    $default-base:'';
    $names:'';
    @for $i from 1 through map.get($conf-orders , count){
        @if map.get($conf-orders , responsive) == true{
            $base:unquote(".order" + "-" + $i);
            $name:$base;
            $name-list:string.split($name,"-");
            $num:nth($name-list,length($name-list));
            $map:(
                name: $base,
                propertyKey:width,
                propertyValue:calc((100% / map.get($conf-orders , count)) * $num)
                );
            $list:append($list , $map);
            @each $key , $value in $break-points{
                $base:unquote(".order" + "-"+ $key + "-" + $i);
                $name:$base;
                $name-list:string.split($name,"-");
                $num:nth($name-list,length($name-list));
                $map:(
                    name: $base,
                    propertyKey:order,
                    propertyValue:$num
                    );
                $list:append($list , $map);
            }
        }
        @else{
            $base:unquote(".order" + "-" + $i);
            $name:$base;
            $name-list:string.split($name,"-");
            $num:nth($name-list,length($name-list));
            $map:(
                name: $base,
                propertyKey:width,
                propertyValue:calc((100% / map.get($conf-orders , count)) * $num)
                );
            $list:append($list , $map);
        }
    }
    @return $list;
}
$flex-orders:generate-flex-orders();

@function generate-flex-grows(){
    $list:();
    $base:'';
    $default-base:'';
    $names:'';
    @for $i from 1 through map.get($conf-grows , count){
        @if map.get($conf-grows , responsive) == true{
            $base:unquote(".grow" + "-" + $i);
            $name:$base;
            $name-list:string.split($name,"-");
            $num:nth($name-list,length($name-list));
            $map:(
                name: $base,
                propertyKey:width,
                propertyValue:calc((100% / map.get($conf-grows , count)) * $num)
                );
            $list:append($list , $map);
            @each $key , $value in $break-points{
                $base:unquote(".grow" + "-"+ $key + "-" + $i);
                $name:$base;
                $name-list:string.split($name,"-");
                $num:nth($name-list,length($name-list));
                $map:(
                    name: $base,
                    propertyKey:grow,
                    propertyValue:$num
                    );
                $list:append($list , $map);
            }
        }
        @else{
            $base:unquote(".grow" + "-" + $i);
            $name:$base;
            $name-list:string.split($name,"-");
            $num:nth($name-list,length($name-list));
            $map:(
                name: $base,
                propertyKey:width,
                propertyValue:calc((100% / map.get($conf-grows , count)) * $num)
                );
            $list:append($list , $map);
        }
    }
    @return $list;
}
$flex-grows:generate-flex-grows();

// flex-direction

@function generate-flex-direction-classes($property-value){
    $list:();
    $prefix:$property-value;
    @if map.get($conf-flex-direction , responsive) == true{
        $base:unquote(".flex" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:flex-direction,
            propertyValue:$property-value
        );
        $list:append($list , $map);
        @each $key , $value in $break-points{
            $base:unquote(".flex" + "-"+ $key + "-" + $prefix);
            $map:(
                name: $base,
                propertyKey:flex-direction,
                propertyValue:$property-value
            );
            $list:append($list , $map);
        }
    }
    @else{
        $base:unquote(".flex" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:flex-direction,
            propertyValue:$property-value
        );
        $list:append($list , $map);
    }
    @return $list;
}

$flex-direction-value-list:(row , row-reverse , column , column-reverse);
$flex-direction-list:();
@for $i from 1 through length($flex-direction-value-list){
    $function-flex-direction:generate-flex-direction-classes(nth($flex-direction-value-list , $i));
    $flex-direction-list:append($flex-direction-list , $function-flex-direction , comma);
}

// justify-content

@function generate-justify-content-classes($property-value){
    $list:();
    $prefix:$property-value;
    @if map.get($conf-justify-content , responsive) == true{
        $base:unquote(".justify-content" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-content,
            propertyValue:$property-value
        );
        $list:append($list , $map);
        @each $key , $value in $break-points{
            $base:unquote(".justify-content" + "-"+ $key + "-" + $prefix);
            $map:(
                name: $base,
                propertyKey:justify-content,
                propertyValue:$property-value
            );
            $list:append($list , $map);
        }
    }
    @else{
        $base:unquote(".justify-content" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-content,
            propertyValue:$property-value
        );
        $list:append($list , $map);
    }
    @return $list;
}

$justify-content-value-list:(row , row-reverse , column , column-reverse);
$justify-content-list:();
@for $i from 1 through length($justify-content-value-list){
    $function-justify-content:generate-justify-content-classes(nth($justify-content-value-list , $i));
    $justify-content-list:append($justify-content-list , $function-justify-content , comma);
}

// justify-self

@function generate-justify-self-classes($property-value){
    $list:();
    $prefix:$property-value;
    @if map.get($conf-justify-self , responsive) == true{
        $base:unquote(".justify-self" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-self,
            propertyValue:$property-value
        );
        $list:append($list , $map);
        @each $key , $value in $break-points{
            $base:unquote(".justify-self" + "-"+ $key + "-" + $prefix);
            $map:(
                name: $base,
                propertyKey:justify-self,
                propertyValue:$property-value
            );
            $list:append($list , $map);
        }
    }
    @else{
        $base:unquote(".justify-self" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-self,
            propertyValue:$property-value
        );
        $list:append($list , $map);
    }
    @return $list;
}

$justify-self-value-list:(row , row-reverse , column , column-reverse);
$justify-self-list:();
@for $i from 1 through length($justify-self-value-list){
    $function-justify-self:generate-justify-self-classes(nth($justify-self-value-list , $i));
    $justify-self-list:append($justify-self-list , $function-justify-self , comma);
}

// justify-items

@function generate-justify-items-classes($property-value){
    $list:();
    $prefix:$property-value;
    @if map.get($conf-justify-items , responsive) == true{
        $base:unquote(".justify-items" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-items,
            propertyValue:$property-value
        );
        $list:append($list , $map);
        @each $key , $value in $break-points{
            $base:unquote(".justify-items" + "-"+ $key + "-" + $prefix);
            $map:(
                name: $base,
                propertyKey:justify-items,
                propertyValue:$property-value
            );
            $list:append($list , $map);
        }
    }
    @else{
        $base:unquote(".justify-items" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-items,
            propertyValue:$property-value
        );
        $list:append($list , $map);
    }
    @return $list;
}

$justify-items-value-list:(row , row-reverse , column , column-reverse);
$justify-items-list:();
@for $i from 1 through length($justify-items-value-list){
    $function-justify-items:generate-justify-items-classes(nth($justify-items-value-list , $i));
    $justify-items-list:append($justify-items-list , $function-justify-items , comma);
}

// align-contents

@function generate-align-content-classes($property-value){
    $list:();
    $prefix:$property-value;
    @if map.get($conf-align-content , responsive) == true{
        $base:unquote(".align-content" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-content,
            propertyValue:$property-value
        );
        $list:append($list , $map);
        @each $key , $value in $break-points{
            $base:unquote(".align-content" + "-"+ $key + "-" + $prefix);
            $map:(
                name: $base,
                propertyKey:align-content,
                propertyValue:$property-value
            );
            $list:append($list , $map);
        }
    }
    @else{
        $base:unquote(".align-content" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-content,
            propertyValue:$property-value
        );
        $list:append($list , $map);
    }
    @return $list;
}

$align-content-value-list:(row , row-reverse , column , column-reverse);
$align-content-list:();
@for $i from 1 through length($align-content-value-list){
    $function-align-content:generate-align-content-classes(nth($align-content-value-list , $i));
    $align-content-list:append($align-content-list , $function-align-content , comma);
}

//align-self

@function generate-align-self-classes($property-value){
    $list:();
    $prefix:$property-value;
    @if map.get($conf-align-self , responsive) == true{
        $base:unquote(".align-self" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-self,
            propertyValue:$property-value
        );
        $list:append($list , $map);
        @each $key , $value in $break-points{
            $base:unquote(".align-self" + "-"+ $key + "-" + $prefix);
            $map:(
                name: $base,
                propertyKey:align-self,
                propertyValue:$property-value
            );
            $list:append($list , $map);
        }
    }
    @else{
        $base:unquote(".align-self" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-self,
            propertyValue:$property-value
        );
        $list:append($list , $map);
    }
    @return $list;
}

$align-self-value-list:(row , row-reverse , column , column-reverse);
$align-self-list:();
@for $i from 1 through length($align-self-value-list){
    $function-align-self:generate-align-self-classes(nth($align-self-value-list , $i));
    $align-self-list:append($align-self-list , $function-align-self , comma);
}

//align-items

@function generate-align-self-classes($property-value){
    $list:();
    $prefix:$property-value;
    @if map.get($conf-align-self , responsive) == true{
        $base:unquote(".align-self" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-self,
            propertyValue:$property-value
        );
        $list:append($list , $map);
        @each $key , $value in $break-points{
            $base:unquote(".align-self" + "-"+ $key + "-" + $prefix);
            $map:(
                name: $base,
                propertyKey:align-self,
                propertyValue:$property-value
            );
            $list:append($list , $map);
        }
    }
    @else{
        $base:unquote(".align-self" + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-self,
            propertyValue:$property-value
        );
        $list:append($list , $map);
    }
    @return $list;
}

$align-self-value-list:(row , row-reverse , column , column-reverse);
$align-self-list:();
@for $i from 1 through length($align-self-value-list){
    $function-align-self:generate-align-self-classes(nth($align-self-value-list , $i));
    $align-self-list:append($align-self-list , $function-align-self , comma);
}

// flex-warp

.flex-wrap{
    flex-wrap: wrap;
}

.flex-nowrap{
    flex-wrap: nowrap;
}
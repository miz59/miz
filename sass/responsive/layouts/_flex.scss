@import "../functions/responsive";
@import "../../config";

.row{
    width: 100%;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

@function flex-cols-generator(){

    $names:generate-responsive-classes(col , map.get($conf-cols , count));

    $list:();

    @for $i from 1 through length($names){
        $name:nth($names,$i);
        $name-list:string.split($name,"-");
        $num:nth($name-list,length($name-list));

        

    $map:(
        name: nth($names,$i),
        propertyKey:width,
        propertyValue:calc((100% / map.get($conf-cols , count)) * $num)
    );

    $list:append($list ,$map);

          
    }

    @return $list;
}
$flex-cols:flex-cols-generator();

// flex-direction

.flex-row{
    flex-direction: row;
}

.flex-row-reverse{
    flex-direction: row-reverse;
}

.flex-column{
    flex-direction: column;
}

.flex-column-reverse{
    flex-direction: column-reverse;
}

// justify-content

.justify-content-start{
    justify-content: start;
}

.justify-content-flex-start{
    justify-content: flex-start;
}

.justify-content-center{
    justify-content: center;
}

.justify-content-end{
    justify-content: end;
}

.justify-content-flex-end{
    justify-content: flex-end;
}

.justify-content-stretch{
    justify-content: stretch;
}

.justify-content-between{
    justify-content: space-between;
}

.justify-content-around{
    justify-content: space-around;
}

.justify-content-evenly{
    justify-content: space-evenly;
}

// justify-self

.justify-self-start{
    justify-self: start;
}

.justify-self-center{
    justify-self: center;
}

.justify-self-end{
    justify-self: end;
}

.justify-self-right{
    justify-self: right;
}

.justify-self-left{
    justify-self: left;
}

.justify-self-stretch{
    justify-self: stretch;
}

.justify-self-baseline{
    justify-self: baseline;
}

// justify-items

.justify-items-start{
    justify-items: start;
}

.justify-items-center{
    justify-items: center;
}

.justify-items-end{
    justify-items: end;
}

.justify-items-right{
    justify-items: right;
}

.justify-items-left{
    justify-items: left;
}


.justify-items-stretch{
    justify-items: stretch;
}

.justify-items-baseline{
    justify-items: baseline;
}

// align-contents

.align-content-start{
    align-content: start;
}

.align-content-flex-start{
    align-content: flex-start;
}

.align-content-center{
    align-content: center;
}

.align-content-end{
    align-content: end;
}

.align-content-flex-end{
    align-content: flex-end;
}

.align-content-stretch{
    align-content: stretch;
}

.align-content-between{
    align-content: space-between;
}

.align-content-around{
    align-content: space-around;
}

.align-content-evenly{
    align-content: space-evenly;
}

//align-self

.align-self-start{
    align-self: start;
}

.align-self-flex-start{
    align-self: flex-start;
}

.align-self-center{
    align-self: center;
}

.align-self-end{
    align-self: end;
}

.align-self-flex-end{
    align-self: flex-end;
}

.align-self-stretch{
    align-self: stretch;
}

.align-self-baseline{
    align-self: baseline;
}

//align-items

.align-items-start{
    align-items: start;
}

.align-items-flex-start{
    align-items: flex-start;
}

.align-items-center{
    align-items: center;
}

.align-items-end{
    align-items: end;
}

.align-items-flex-end{
    align-items: flex-end;
}

.align-items-stretch{
    align-items: stretch;
}

.align-items-baseline{
    align-items: baseline;
}

@function flex-orders-generator(){
    $names:generate-responsive-classes(order , map.get($conf-order , count));
    $list:();
    @for $i from 1 through length($names){
        $name:nth($names,$i);
        $name-list:string.split($name,"-");
        $num:nth($name-list,length($name-list));
        $map:(
            name: nth($names,$i),
            propertyKey:order,
            propertyValue:$num
        );
        $list:append($list ,$map);
    }
    @return $list;
}
$flex-orders:flex-orders-generator();

@function flex-grows-generator(){
    $names:generate-responsive-classes(grow , map.get($conf-grow , count));
    $list:();
    @for $i from 1 through length($names){
        $name:nth($names,$i);
        $name-list:string.split($name,"-");
        $num:nth($name-list,length($name-list));
        $map:(
            name: nth($names,$i),
            propertyKey:flex-grow,
            propertyValue:$num
        );
        $list:append($list ,$map);     
    }
    @return $list;
}
$flex-grows:flex-grows-generator();

.flex-wrap{
    flex-wrap: wrap;
}

.flex-nowrap{
    flex-wrap: nowrap;
}

// justify-content

@function generate-responsive-justify-content-classes($prefix){
    $list:();
    @each $key , $value in $break-points{
        $base:unquote(".justify-content" + "-" + $key + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-content,
            propertyValue:$prefix
        );
        $list:append($list , $map);
    }
    @return $list;
}

$justify-content-value-list:(start , center , end);
$justify-content-list:();
@for $i from 1 through length($justify-content-value-list){
    $justify-content-list:generate-responsive-justify-content-classes(nth($justify-content-value-list , $i));
}

// justify-self

@function generate-responsive-justify-self-classes($prefix){
    $list:();
    @each $key , $value in $break-points{

        $base:unquote(".justify-self" + "-" + $key + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-self,
            propertyValue:$prefix
        );
        $list:append($list , $map);
    }
    @return $list;
}

$justify-self-value-list:(start , center , end);
$justify-self-list:();
@for $i from 1 through length($justify-self-value-list){
    $justify-self-list:generate-responsive-justify-self-classes(nth($justify-self-value-list , $i));
}

// justify-items

@function generate-responsive-justify-items-classes($prefix){
    $list:();
    @each $key , $value in $break-points{
        $base:unquote(".justify-items" + "-" + $key + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:justify-items,
            propertyValue:$prefix
        );
        $list:append($list , $map);
    }
    @return $list;
}

$justify-items-value-list:(start , center , end);
$justify-items-list:();
@for $i from 1 through length($justify-items-value-list){
    $justify-items-list:generate-responsive-justify-items-classes(nth($justify-items-value-list , $i));
}

// align-content

@function generate-responsive-align-content-classes($prefix){
    $list:();
    @each $key , $value in $break-points{
        $base:unquote(".align-content" + "-" + $key + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-content,
            propertyValue:$prefix
        );
        $list:append($list , $map);
    }
    @return $list;
}

$align-content-value-list:(start , center , end);
$align-content-list:();
@for $i from 1 through length($align-content-value-list){
    $align-content-list:generate-responsive-align-content-classes(nth($align-content-value-list , $i));
}

// align-self

@function generate-responsive-align-self-classes($prefix){
    $list:();
    @each $key , $value in $break-points{
        $base:unquote(".align-self" + "-" + $key + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-self,
            propertyValue:$prefix
        );
        $list:append($list , $map);
    }
    @return $list;
}

$align-self-value-list:(start , center , end);
$align-self-list:();
@for $i from 1 through length($align-self-value-list){
    $align-self-list:generate-responsive-align-self-classes(nth($align-self-value-list , $i));
}

// align-items

@function generate-responsive-align-items-classes($prefix){
    $list:();
    @each $key , $value in $break-points{
        $base:unquote(".align-items" + "-" + $key + "-" + $prefix);
        $map:(
            name: $base,
            propertyKey:align-items,
            propertyValue:$prefix
        );
        $list:append($list , $map);
    }
    @return $list;
}

$align-items-value-list:(start , center , end);
$align-items-list:();
@for $i from 1 through length($align-items-value-list){
    $align-items-list:generate-responsive-align-items-classes(nth($align-items-value-list , $i));
}
@import "../functions/responsive";
@import "../../config";

.row{
    width: 100%;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}

@function generate-flex-cols(){
    $list:();
    $base:'';
    $default-base:'';
    $names:'';
    @if map.get($conf-cols , count) == 0{
        @return ();
    }
    @for $i from 1 through map.get($conf-cols , count){
        @if map.get($conf-cols , responsive) == true{
            $j:0;
            @each $key , $value in $break-points{
                $j:$j+1;
                $name:generate-responsive-classes(col , $i);
                $num:$i;
                $map:(
                    name: nth($name , ($j * $i)),
                    propertyKey:width,
                    propertyValue:calc((100% / map.get($conf-cols , count)) * $num)
                );
                $list:append($list , $map);
            }
        }
        @else{
            $base:nth(generate-classes(col , $i) , $i);
            $num:$i;
            $map:(
                name: $base,
                propertyKey:width,
                propertyValue:calc((100% / map.get($conf-cols , count)) * $num)
            );
            $list:append($list , $map);
        }
    }
    @return $list;
}
$flex-cols:generate-flex-cols();

@function generate-flex-grows(){
    $list:();
    $base:'';
    $default-base:'';
    $names:'';
    @if map.get($conf-grows , count) == 0{
        @return ();
    }
    @for $i from 1 through map.get($conf-grows , count){
        @if map.get($conf-grows , responsive) == true{
            $j:0;
            @each $key , $value in $break-points{
                $j:$j+1;
                $name:generate-responsive-classes(grow , $i);
                $num:$i;
                $map:(
                    name: nth($name , ($j * $i)),
                    propertyKey:flex-grow,
                    propertyValue:$i
                );
                $list:append($list , $map);
            }
        }
        @else{
            $base:nth(generate-classes(grow , $i) , $i);
            $num:$i;
            $map:(
                name: $base,
                propertyKey:flex-grow,
                propertyValue:$i
            );
            $list:append($list , $map);
        }
    }
    @return $list;
}
$flex-grows:generate-flex-grows();

// flex

$conf-list:(
    justify-content:map.get($conf-justify-content , responsive) ,
    justify-self:map.get($conf-justify-self , responsive) ,
    justify-items:map.get($conf-justify-items , responsive) , 
    align-content:map.get($conf-align-content , responsive) , 
    align-self:map.get($conf-align-self , responsive) , 
    align-items:map.get($conf-align-items , responsive) , 
    flex-direction:map.get($conf-flex-direction , responsive) ,
);
$flex-direction-value-list:(row , row-reverse , column , column-reverse);
$justify-content-value-list:( center ,  flex-start , flex-end , space-between , space-around , space-evenly );
$justify-self-value-list:(start , center , end ,  left , right , stretch);

$justify-items-value-list:(start , center , end ,  left , right , stretch);
$align-content-value-list:( center ,  flex-start , flex-end , space-between , space-around , space-evenly );

$align-self-value-list:( center ,  flex-start , flex-end , baseline , stretch);

$align-items-value-list:( center ,  flex-start , flex-end , stretch,start,end, baseline );

$value-list:(
    $flex-direction-value-list ,
    // $justify-content-value-list ,
    // $justify-self-value-list ,
    // $justify-items-value-list ,
    // $align-content-value-list ,
    // $align-self-value-list ,
    // $align-items-value-list ,
);
$key-list:(
    flex-direction ,
    // justify-content ,
    // justify-self ,
    // justify-items ,
    // align-content ,
    // align-self ,
    // align-items ,
);
@function generate-flex-classes($property-key-list , $property-value-list){
    $list:();
    @for $c from 1 through length($property-key-list){
        @for $i from 1 through length($property-value-list){
            @if map.get($conf-list , nth($property-key-list , $c)) == true{
                @each $key , $value in $break-points{
                    $base:generate-classes-responsive-on-value(nth($property-key-list , $c) ,$key, nth($property-value-list , $i));
                    $map:(
                        name: $base,
                        propertyKey:nth($property-key-list , $c),
                        propertyValue:nth($property-value-list , $i)
                    );
                    $list:append($list , $map);
                }
            }
            @else{
                $base:generate-classes-on-value(nth($property-key-list , $c) , nth($property-value-list , $i));
                $map:(
                    name: $base,
                    propertyKey:nth($property-key-list , $c),
                    propertyValue:nth($property-value-list , $i)
                );
                $list:append($list , $map);
            }
        }
    }
    @return $list;
}

$flex-list:();
@for $i from 1 through length($key-list){
    $value:generate-flex-classes(nth($key-list , $i), nth($value-list , $i));
    $flex-list:join($flex-list , $value);
}
@debug $flex-list;

// flex-warp

.flex-wrap{
    flex-wrap: wrap;
}

.flex-nowrap{
    flex-wrap: nowrap;
}
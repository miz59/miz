$totalist :  $flex-cols,$p,$m,$gap,$g,$flex-orders,$flex-grows,$flex-direction-list,$justify-content-list,$justify-self-list,$justify-items-list,$align-content-list,$align-self-list,$align-items-list;
@function check-config-count($i){
    @if length(nth($totalist,$i))!=0{
        @return true;
    }
    @return false;
}
@mixin generate-style-property($i,$j){
    @if (check-config-count($i)){
        $name:map.get(nth(nth($totalist,$i),$j),name);
        $property-key:map.get(nth(nth($totalist,$i),$j),propertyKey);
        $property-value:map.get(nth(nth($totalist,$i),$j),propertyValue);
        @if(string.index($name,("-"+$key))!=null){
            #{$name} {
                #{$property-key}: $property-value;
            }
        }
    }
}
@mixin generate-classes($key){
    @for $x from 1 through length($totalist){
        @for $i from 1 through length(nth($totalist,$x)){
            @include generate-style-property($x,$i);
        }
    }
}

@function get-greatest-breakpoints(){
    $max-size:0;
    @each $key , $value in $break-points{
        @if map.get($break-points, $key) > $max-size{
            $max-size : map.get($break-points, $key);
        }
    }
    @return $max-size;
}

@function get-greatest-breakpoints-key(){
    $max-size-key:"";
    $max-size:0;
    @each $key , $value in $break-points{
        @if map.get($break-points, $key) > $max-size{
            $max-size : map.get($break-points, $key);
            $max-size-key: $key;
        }
    }
    @return $max-size-key;
}

@each $key , $value in $break-points{
    $max-break-point:get-greatest-breakpoints();
    $max-break-point-key: get-greatest-breakpoints-key();
    @if($value != $max-break-point){
        @media screen and (max-width : $value) {
            @include generate-classes($key);
        }
    }  
    @else{
        @include generate-classes($key);
    } 
}


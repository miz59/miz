@import '../../../structure/typography';

$font-weight : '';

@function font-weight-connection($font-weight-name){
@if $font-weight-name == 'black'{
        @return  900;
    }
    @else if $font-weight-name == 'extra-bold'{
        @return  800;
    }

    @else if $font-weight-name == 'bold'{
        @return  700;
    }

    @else if $font-weight-name == 'semi-bold'{
        @return  600;
    }

    @else if $font-weight-name == 'medium'{
        @return  500;
    }

    @else if $font-weight-name == 'regular'{
        @return  400;
    }

    @else if $font-weight-name == 'light'{
        @return  300;
    }

    @else if $font-weight-name == 'extra-light'{
        @return  200;
    }

    @else if $font-weight-name == 'thin'{
        @return  100;
    }
    @else{
        @error "font weight wrongly entered as key";
    }
}
@mixin make-font-face{
    @each $font-name , $font-details in $fonts {
      $font-folder: map-get($font-details, "folder");
      @each $font-type, $font-files in map-get($font-details, "font-types") {
        $font-weight : font-weight-connection($font-type);
         @font-face {
            $file-src : '';
            font-family: "#{$font-name}";
            font-weight: $font-weight;
            @each $font-file in $font-files {
              $file-name: nth($font-file, 1);
              $file-format: str-slice($file-name, str-index($file-name, ".") + 1);
              $file-path: $font-folder + "/" + $file-name;
              $file-src :$file-src + #{url("#{$fonts-path + $file-path}")} + ",";
            }
            src: unquote($file-src);
          }
      }
    }
}
@mixin make-font-classes{ 
    $font-name:map.keys($fonts);
    @for $i from 1 through length($font-name){
        $class-name : nth($font-name , $i);
        $font: map-get($fonts, '#{$class-name}');
        $font-type : map-get($font , 'font-types');
        $font-defaults: map-get($font, "defaults");
        .#{$class-name}{
            font-family : join($class-name , $font-defaults , comma);
        }
        @each $font-name, $font-file in $font-type{
            $font-weight : font-weight-connection($font-name);
            .#{$font-prefix}-#{$font-name}{
                font-weight: $font-weight;
            }
        }
    }
}
@function generate-text-align(){
    $list : ();
    $base : ();

    
    @each $key,$value in $break-points{
        @each $name in $text-align{
            $base:generate-classes-responsive-on-value($font-prefix , $key , $name);;
            $map:(
                className: $base,
                propertyKeys:'text-align',
                propertyValues:$name
            );
            $list:append($list , $map);
        }
    
    }
    @return $list;
}
$font-size-responsive : generate-typography-size-classes($font-size,$font-prefix);
$font-size : generate-typography-size-classes-without-responsive($font-size,$font-prefix);
$generate-text-align : generate-text-align();
@include make-font-face;
@include make-font-classes;

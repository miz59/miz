@use "../../kernel-functions/_break-point" as *;
@use "../functions/responsive" as *;
@use "../../../config/paths" as *;
@use "../../../../themes/mizoon/config/typography" as *;
@use "../../../config/_typography" as *;
@use 'sass:list';
@use 'sass:map';
@use 'sass:string';

$font-weight : '';
.font-weight-black{
    font-weight: 900;
}
.font-weight-extra-bold{
    font-weight: 800;
}
.font-weight-bold{
    font-weight: 700;
}
.font-weight-semi-bold{
    font-weight: 600;
}
.font-weight-medium{
    font-weight: 500;
}
.font-weight-regular{
    font-weight: 400;
}
.font-weight-light{
    font-weight: 300;
}
.font-weight-extra-light{
    font-weight: 200;
}
.font-weight-thin{
    font-weight: 100;
}

.#{$font-prefix}-ellipsis{
  white-space: nowrap;
  overflow-x: hidden;
  text-overflow: ellipsis;
}
.list-style{
  list-style: unset;
}
.line-height{
  line-height:  1.7;
  @media screen and (max-width : get-break-point-value(xl)) {
    line-height: 1.5;
  }
  @media screen and (max-width : get-break-point-value(lg)) {
    line-height:  1.4;
  }
  @media screen and (max-width : get-break-point-value(md)) {
    line-height:  1.4;
  }
  @media screen and (max-width : get-break-point-value(sm)) {
    line-height:  1.3;
  }
}

@function font-weight-connection($weight-string){
    $weight-number : 0;
    @if ($weight-string == "black"){$weight-number: 900;}
    @else if ($weight-string == "extra-bold"){$weight-number: 800;}
    @else if ($weight-string == "bold"){$weight-number: 700;}
    @else if ($weight-string == "semi-bold"){$weight-number: 600;}
    @else if ($weight-string == "medium"){$weight-number: 500;}
    @else if ($weight-string == "regular"){$weight-number: 400;}
    @else if ($weight-string == "light"){$weight-number: 300;}
    @else if ($weight-string == "extra-light"){$weight-number: 200;}
    @else if ($weight-string == "thin"){$weight-number: 100;}

    @return $weight-number;
}
@mixin make-font-face{
    @each $font-name , $font-details in $fonts {
        $font-folder: map.get($font-details, "folder");
        $font-default: map.get($font-details, "defaults");
        @each $font-type, $font-files in map.get($font-details, "font-types") {
        $font-weight : font-weight-connection($font-type);
            @font-face {
            $file-src : '';
            font-family: $font-name;
            font-weight: $font-weight;
            @each $font-file in $font-files {
                $file-name: list.nth($font-file, 1);
                $file-format: string.slice($file-name, string.index($file-name, ".") + 1);
                $file-path: $font-folder + "/" + $file-name;
                $file-src :$file-src + #{url("#{$fonts-path + $file-path}")} + ",";
            }
            src: string.unquote($file-src);
            }
        }
        .font-#{$font-name}{
            font-family: string.unquote("var(--font-#{$font-name})") , string.unquote($font-default);
        }
    }
}
@function generate-text-style($property , $value , $class){
    $list : ();
    $base : ();
    @each $name in $value{
        $base:generate-classes-on-value(($font-prefix + "-" + $class) , $name);
        $map:(
            className: $base,
            propertyKeys:'#{$property}',
            propertyValues:$name
        );
        $list:list.append($list , $map);
    }
    @return $list;
}

$font-size-responsive : generate-typography-size-classes($font-size, $font-prefix);
$generate-text-align : generate-text-style(text-align , $text-align , align);
$generate-text-transform : generate-text-style(text-transform , $text-transform , transform);
$generate-text-decoration-line : generate-text-style(text-decoration-line , $text-decoration-line , decoration);
$generate-text-decoration-style : generate-text-style(text-decoration-style , $text-decoration-style , decoration-style);
$generate-font-style : generate-text-style(font-style , $font-style , style);

@include make-font-face;
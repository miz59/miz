@import '../../../structure/typography'; 

$font-weight : '';

@function font-weight-connection($font-weight-name){
    @if $font-weight-name == 'bold'{
        @return  700;
    }
    @if $font-weight-name == 'black'{
        @return  800;
    }
    @if $font-weight-name == 'light'{
        @return  300;
    }
    @if $font-weight-name == 'medium'{
        @return  500;
    }
    @if $font-weight-name == 'regular'{
        @return  400;
    }
    @if $font-weight-name == 'thin'{
        @return  100;
    }
}
@mixin make-font-face{
    @each $font-name , $font-details in $fonts {
      $font-folder: map-get($font-details, "folder");
      $font-defaults: map-get($font-details, "defaults");
      @each $font-type, $font-files in map-get($font-details, "font-types") {
        $font-weight : font-weight-connection($font-type);
    }
            @font-face {
               $file-src : '';
               font-family: map-get($font-details, "name");
               font-weight: $font-weight;
               @each $font-file in $font-files {
                 $file-name: nth($font-file, 1);
                 $file-format: str-slice($file-name, str-index($file-name, ".") + 1);
                 $file-path: $font-folder + "/" + $file-name;
                 $file-src :$file-src + #{url("#{$fonts-path + $file-path}") format('#{$file-format}')} + ', ';
               }
               src: unquote($file-src);
            }
         @font-face {
            $file-src : '';
            font-family: "#{$font-name}" unquote($font-defaults);
            font-weight: $font-weight;
            @each $font-file in $font-files {
              $file-name: nth($font-file, 1);
              $file-format: str-slice($file-name, str-index($file-name, ".") + 1);
              $file-path: $font-folder + "/" + $file-name;
              $file-src :$file-src + #{url("#{$fonts-path + $file-path}")} + ",";
            }
            src: unquote($file-src);
          }
      }
    }
}
@mixin make-font-classes{ 
    $font-name:map.keys($fonts);
    @for $i from 1 through length($font-name){
        $class-name : nth($font-name , $i);
        $font: map-get($fonts, '#{$class-name}');
        $font-type : map-get($font , 'font-types');
        .#{$class-name}{
            font-family : $class-name;
        }
        @each $font-name, $font-file in $font-type{
            $font-weight : font-weight-connection($font-name);
            .#{$font-prefix}-#{$font-name}{
                font-weight: $font-weight;
            }
        }
    }
}
@function generate-font-size-classes(){
    $list : ();
    $base : ();

    @each $key,$value in $break-points{
        @each $name, $size in $font-size{
            $base:generate-classes-responsive-on-value($font-prefix , $key , $name);
            $map:(
                className: $base,
                propertyKeys:'font-size',
                propertyValues:$size
            );
            $list:append($list , $map);
        }
    }
    @return $list;
}
@function generate-font-size-classes-without-responsive(){
    $list : ();
    $base : ();

    @each $name, $size in $font-size{
        $base:generate-classes-on-value($font-prefix , $name);
        $map:(
            className: $base,
            propertyKeys:'font-size',
            propertyValues:$size
        );
        $list:append($list , $map);
    }
    @return $list;
}
$font-size-responsive : generate-font-size-classes();
$font-size : generate-font-size-classes-without-responsive();
<<<<<<< HEAD
=======
$font-size : generate-font-size-classes();
>>>>>>> 6343ae272146fd2d6739fce8a210c6cee584ed8b
@include make-font-face;
@include make-font-classes;
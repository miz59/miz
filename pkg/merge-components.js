import { readdirSync, statSync, readFileSync, writeFileSync, mkdirSync , existsSync } from 'fs';
import { join, relative, dirname } from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';
import { config } from '../themes/scripts.js';
import chokidar from 'chokidar';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const projectRoot = process.cwd();

const themeDependencyPath = [
    "../sass/kernel/common/_aspect-ratio.scss",
    "../sass/kernel/common/_opacity.scss",
    "../sass/kernel/common/_z-index.scss",
    "../sass/kernel/kernel-functions/_colors.scss",
    "../sass/kernel/responsive/boots/_border.scss",
    "../sass/kernel/responsive/boots/_colors.scss",
    "../sass/structure/_borders.scss",
    "../themes/_index.scss",
].map(p => join(__dirname, p));

function ensureDirectoryExists(dirPath) {
    try {
        mkdirSync(dirPath, { recursive: true });
        console.log(`üìÅ Directory created/verified: ${dirPath}`);
    } catch (error) {
        if (error.code !== 'EEXIST') {
            console.error(`‚ùå Error creating directory ${dirPath}:`, error);
            throw error;
        }
    }
}

function findJsFiles(dir) {
    let jsFiles = [];
    const files = readdirSync(dir);

    files.forEach(file => {
        const filePath = join(dir, file);
        const stat = statSync(filePath);

        if (stat.isDirectory()) {
            jsFiles = jsFiles.concat(findJsFiles(filePath));
        } else if (file.endsWith('.js')) {
            jsFiles.push(filePath);
        }
    });

    return jsFiles;
}

function mergeJsFiles() {
    const componentsDir = join(__dirname, '..', 'themes', config.theme, 'components');
    const jsFiles = findJsFiles(componentsDir);
    let mergedContent = '// Mizoon Theme Scripts\n';
    mergedContent += '// This file is automatically generated by merging all component scripts\n\n';

    console.log(`üîç Found ${jsFiles.length} JavaScript files to merge...`);

    jsFiles.forEach((file, index) => {
        try {
            const content = readFileSync(file, 'utf8');
            mergedContent += `\n// File: ${relative(componentsDir, file)}\n`;
            mergedContent += content;
            mergedContent += '\n';
            console.log(`‚úÖ Processed file ${index + 1}/${jsFiles.length}: ${relative(componentsDir, file)}`);
        } catch (error) {
            console.error(`‚ùå Error reading file ${file}:`, error);
        }
    });

    return mergedContent;
}

function writeMergedContent() {
    if (!verifyTheme()){
        return
    }
    const outputPath = join(projectRoot, config.output);
    console.log(`üöÄ Starting merge process...`);
    ensureDirectoryExists(dirname(outputPath));
    const mergedContent = mergeJsFiles();
    writeFileSync(outputPath, mergedContent);
    console.log(`üíæ Merged content written to: ${config.output}`);
    updateUseStatements(themeDependencyPath);
    console.log(`üéâ All component scripts have been merged successfully to ${config.output}!`);
}

function verifyTheme() {
    if (!config.theme || config.theme.trim() === '') {
        console.error("‚ùå config.theme is empty. Please provide a valid theme name.");
        return false;
    }

    const themeDir = join(__dirname, '..', 'themes', config.theme);

    if (!existsSync(themeDir)) {
        console.warn(`‚ö†Ô∏è Theme directory does not exist: ${themeDir}. Skipping updateUseStatements.`);
        return false;
    }

    return true;
}

const isWatchMode = process.argv.includes('--watch');
const isBuildMode = process.argv.includes('--build');


if (isWatchMode) {
    console.log('üëÄ Watching for changes in component scripts...');

    const componentsDir = join(__dirname, '..', 'themes', config.theme, 'components');

    chokidar.watch([componentsDir, join(__dirname, '..', 'themes', 'scripts.js')], {
        ignored: /(^|[\/\\])\../,
        persistent: true
    }).on('change', (path) => {
        console.log(`üìù File changed: ${path}`);
        console.log('üîÑ Re-merging components...');
        try {
            writeMergedContent();
            console.log('‚úÖ Merge complete!');
        } catch (error) {
            console.error('‚ùå Error during re-merge:', error);
        }
    });

} else if (isBuildMode) {
    try {
        writeMergedContent();
        const outputPath = join(projectRoot, config.output);
        execSync(`terser "${outputPath}" -o "${outputPath}"`);
        console.log(`üß™ Minified file created at: ${outputPath}`);
    } catch (error) {
        console.error(`‚ùå Error during minification:`, error);
    }
} else {
    console.log('‚ö° Running merge process once...');
    writeMergedContent();
}

function updateUseStatements(files) {
    if (!config.theme || config.theme.trim() === '') {
        console.error("‚ùå config.theme is empty. Please provide a valid theme name.");
        return;
    }

    const themeDir = join(__dirname, '..', 'themes', config.theme);

    if (!existsSync(themeDir)) {
        console.warn(`‚ö†Ô∏è Theme directory does not exist: ${themeDir}. Skipping updateUseStatements.`);
        return;
    }

    const useRegex = /@use ["']([^"']*themes\/)([^\/]+)(\/[^"']*)["'] as \*;/g;
    const forwardRegex = /@forward ["']([^"']+)["'];/g;

    console.log(`üîß Updating theme paths in ${files.length} files...`);

    files.forEach((filePath, index) => {
        try {
            const originalContent = readFileSync(filePath, 'utf8');

            let updatedContent = originalContent.replace(useRegex, (match, prefix, oldThemeName, suffix) => {
                if (oldThemeName === config.theme) return match; // Ÿá€å⁄Ü ÿ™ÿ∫€å€åÿ±€å ŸÜ€åÿßÿ≤ ŸÜ€åÿ≥ÿ™
                const updatedPath = `"${prefix}${config.theme}${suffix}"`;
                return `@use ${updatedPath} as *;`;
            });

            updatedContent = updatedContent.replace(forwardRegex, (match, oldForwardPath) => {
                if (oldForwardPath === config.theme) return match;
                return `@forward "${config.theme}";`;
            });

            if (originalContent !== updatedContent) {
                writeFileSync(filePath, updatedContent);
                console.log(`‚úÖ Updated paths in: ${filePath}`);
            } else {
                console.log(`‚è≠Ô∏è  No changes needed in: ${filePath}`);
            }
        } catch (err) {
            console.error(`‚ùå Error processing ${filePath}:`, err);
        }
    });
}